-- trees package specification
CREATE OR REPLACE PACKAGE gen_trees
IS
    PROCEDURE insert_tree
        (p_name VARCHAR2, p_type VARCHAR2 DEFAULT 'Lisciaste',
        p_fruit_id NUMBER DEFAULT 1, p_orchard_id NUMBER DEFAULT 1);
    
    PROCEDURE update_tree
        (p_id NUMBER,
        p_name VARCHAR2, p_type VARCHAR2, p_fruit_id NUMBER, p_orchard_id NUMBER);
    
    PROCEDURE delete_tree
        (p_tree_id NUMBER);
    
    FUNCTION get_tree_name
        (p_tree_id NUMBER)
        RETURN VARCHAR2;
    
    FUNCTION get_tree_type
        (p_tree_id NUMBER)
        RETURN VARCHAR2;
    
    FUNCTION get_fruit_id
        (p_tree_id NUMBER)
        RETURN NUMBER;
    
    FUNCTION get_orchard_id
        (p_tree_id NUMBER)
        RETURN NUMBER;
END;

-- trees package body
CREATE OR REPLACE PACKAGE BODY gen_trees
IS
    PROCEDURE insert_tree
        (p_name VARCHAR2, p_type VARCHAR2 DEFAULT 'Lisciaste',
        p_fruit_id NUMBER DEFAULT 1, p_orchard_id NUMBER DEFAULT 1)
    IS
        v_next_id NUMBER;
    BEGIN
        SELECT MIN(tree_id)+1 INTO v_next_id FROM 
            (SELECT tree_id, LEAD(tree_id) OVER (ORDER BY tree_id)AS next_id FROM trees)
            WHERE (next_id > tree_id+1)
            OR (next_id IS NULL);
        INSERT INTO trees
        VALUES(v_next_id, p_name, p_type, p_fruit_id, p_orchard_id);
        COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN
                dbms_output.put_line(SQLCODE);
                dbms_output.put_line(SQLERRM);
    END;
    
    PROCEDURE update_tree
        (p_id NUMBER,
        p_name VARCHAR2, p_type VARCHAR2, p_fruit_id NUMBER, p_orchard_id NUMBER)
    IS
        v_tree_name trees.tree_name%TYPE;
    BEGIN
        SELECT tree_name INTO v_tree_name
            FROM trees WHERE tree_id=p_id;
        
        UPDATE trees SET tree_name = p_name, tree_type = p_type,
            fruit_id = p_fruit_id, orchard_id = p_orchard_id
            WHERE tree_id = p_id;
        COMMIT;
        EXCEPTION 
            WHEN NO_DATA_FOUND THEN
                dbms_output.put_line('No data found for tree ID '||p_id);
            WHEN OTHERS THEN
                dbms_output.put_line(SQLCODE);
                dbms_output.put_line(SQLERRM);
    END;
    
    PROCEDURE delete_tree
        (p_tree_id NUMBER)
    IS
    BEGIN
        DELETE FROM trees WHERE tree_id=p_tree_id;
        COMMIT;
        
        EXCEPTION
            WHEN OTHERS THEN
                dbms_output.put_line(SQLCODE);
                dbms_output.put_line(SQLERRM);
    END;
    
    FUNCTION get_tree_name
        (p_tree_id NUMBER)
    RETURN VARCHAR2
    IS
        v_name trees.tree_name%TYPE;
    BEGIN
        SELECT tree_name INTO v_name FROM trees
        WHERE tree_id=p_tree_id;
        RETURN v_name;
        
        EXCEPTION
            WHEN OTHERS THEN
                RETURN NULL;
    END;
    
    FUNCTION get_tree_type
        (p_tree_id NUMBER)
    RETURN VARCHAR2
    IS
        v_type trees.tree_type%TYPE;
    BEGIN
        SELECT tree_type INTO v_type FROM trees
        WHERE tree_id=p_tree_id;
        RETURN v_type;
        
        EXCEPTION
            WHEN OTHERS THEN
                RETURN NULL;
    END;
    
    FUNCTION get_fruit_id
        (p_tree_id NUMBER)
    RETURN NUMBER
    IS
        v_fruit_id trees.fruit_id%TYPE;
    BEGIN
        SELECT fruit_id INTO v_fruit_id FROM trees
        WHERE tree_id=p_tree_id;
        RETURN v_fruit_id;
        
        EXCEPTION
            WHEN OTHERS THEN
                RETURN NULL;
    END;
    
    FUNCTION get_orchard_id
        (p_tree_id NUMBER)
    RETURN NUMBER
    IS
        v_orchard_id trees.orchard_id%TYPE;
    BEGIN
        SELECT orchard_id INTO v_orchard_id FROM trees
        WHERE tree_id=p_tree_id;
        RETURN v_orchard_id;
        
        EXCEPTION
            WHEN OTHERS THEN
                RETURN NULL;
    END;
END;
--

EXECUTE gen_trees.insert_tree('test1');

SELECT * FROM trees;

SELECT * FROM trees_audit;

EXECUTE gen_trees.update_tree(7, 'testowa zmiana', 'Iglaste', 1, 1);

SELECT * FROM trees;

SELECT * FROM trees_audit;

EXECUTE gen_trees.delete_tree(7);

SELECT * FROM trees;

SELECT * FROM trees_audit;

SELECT gen_trees.get_tree_name(2) FROM dual;

SELECT gen_trees.get_tree_type(2) FROM dual;

SELECT gen_trees.get_fruit_id(2) FROM dual;

SELECT gen_trees.get_orchard_id(2) FROM dual;