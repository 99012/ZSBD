********************************** 1 **********************************
DECLARE
	numer_max NUMBER(10):=0;
    v_name departments.department_name%TYPE;
BEGIN
    SELECT MAX(department_id) INTO numer_max FROM departments;
    v_name := 'EDUCATION';
    numer_max:=numer_max+10;
    INSERT INTO Departments VALUES(numer_max,v_name,null,null);
	DBMS_OUTPUT.PUT_LINE('Maksymalny numer departamentu wynosi '||numer_max);
END;

********************************** 1 **********************************
********************************** 2 **********************************
DECLARE
	numer_max NUMBER(10):=0;
    v_name departments.department_name%TYPE;
    v_location_id departments.location_id%TYPE;
BEGIN
    SELECT MAX(department_id) INTO numer_max FROM departments;
    DBMS_OUTPUT.PUT_LINE('Maksymalny numer departamentu wynosi '||numer_max);
    v_name := 'EDUCATION';
    numer_max:=numer_max+10;
    INSERT INTO Departments VALUES(numer_max,v_name,null,null);
	v_location_id:=3000;
    UPDATE departments SET location_id = v_location_id WHERE department_id=numer_max;
END;
********************************** 2 **********************************
********************************** 3 **********************************
DECLARE
	i NUMBER(3):=1;
    v_col1 nowa.column1%TYPE;
BEGIN
    v_col1:='';
    WHILE i<=10
	LOOP
		IF i <> 4 AND i <> 6 THEN
        v_col1:=v_col1 || TO_CHAR(i);
        END IF;
		i:=i+1;
	END LOOP;
    DBMS_OUTPUT.PUT_LINE('v col jest rowne '||v_col1);
    INSERT INTO nowa VALUES(v_col1);
END;
********************************** 3 **********************************
********************************** 4 **********************************
DECLARE
	v_coutry_rec countries%ROWTYPE;
    CURSOR c1 IS SELECT * FROM countries WHERE country_id='CA';
BEGIN
    OPEN c1;
    FETCH c1 INTO v_coutry_rec;
    close c1;
    DBMS_OUTPUT.PUT_LINE('Country name: '||v_coutry_rec.country_name||', region code: '||v_coutry_rec.region_id);
END;
********************************** 4 **********************************
********************************** 5 **********************************
DECLARE
    v_department departments%ROWTYPE;
    i INTEGER:=10;
BEGIN
    LOOP
        EXIT WHEN i > 100;
        SELECT * INTO v_department FROM departments WHERE department_id=i;
        dbms_output.put_line(v_department.department_id||' '||v_department.department_name);
        i:=i+10;
    END LOOP;
END;
********************************** 5 **********************************
********************************** 6 **********************************
DECLARE
    v_department departments%ROWTYPE;
    i INTEGER:=10;
BEGIN
    LOOP
        EXIT WHEN i > 100;
        SELECT * INTO v_department FROM departments WHERE department_id=i;
        dbms_output.put_line(v_department.department_id||' '||v_department.department_name
        ||' '||v_department.manager_id||' '||v_department.location_id);
        i:=i+10;
    END LOOP;
END;
********************************** 6 **********************************
********************************** 7 **********************************
DECLARE
	v_wynagrodzenie_rec employees%ROWTYPE;
    CURSOR wynagrodzenie IS SELECT * FROM employees WHERE department_id='50';
    v_salary employees.salary%TYPE;
    v_department_id employees.department_id%TYPE;
BEGIN
    OPEN wynagrodzenie;
    LOOP
        FETCH wynagrodzenie INTO v_wynagrodzenie_rec;
        v_salary:= v_wynagrodzenie_rec.salary;
        v_department_id:= v_wynagrodzenie_rec.department_id;
        IF v_department_id IS NOT NULL THEN
            IF v_salary > 3100 THEN
                DBMS_OUTPUT.PUT_LINE(v_wynagrodzenie_rec.last_name||', nie dawac podwyzki');
            ELSE
                DBMS_OUTPUT.PUT_LINE(v_wynagrodzenie_rec.last_name||', dac podwyzke');
            END IF;
        END IF;
    END LOOP;
    close wynagrodzenie;
END;
********************************** 7 **********************************
********************************** 8 **********************************
DECLARE
    CURSOR c_employee(min_salary NUMBER, max_salary NUMBER, name VARCHAR2) 
    IS SELECT first_name, last_name, salary FROM employees
    WHERE (salary BETWEEN min_salary AND max_salary) AND lower(first_name) LIKE lower(name);
BEGIN
    dbms_output.put_line('Pracownicy z widelkami 1000-5000 zawierajacych litere a w imieniu');
    FOR i in c_employee(1000,5000,'%a%')
        LOOP
            dbms_output.put_line(i.first_name||' '||i.last_name||' '||i.salary);
        END LOOP;
    dbms_output.put_line('Pracownicy z widelkami 5000-20000 zawierajacych litere u w imieniu');
    FOR i in c_employee(5000,20000,'%u%')
        LOOP
            dbms_output.put_line(i.first_name||' '||i.last_name||' '||i.salary);
        END LOOP;
END;
********************************** 8 **********************************
********************************** 9 **********************************
-- 9 a)
CREATE OR REPLACE PROCEDURE add_jobs
    (p_job_id VARCHAR2, p_job_title VARCHAR2)
IS

BEGIN
    INSERT INTO jobs VALUES (p_job_id, p_job_title, NULL, NULL);
    dbms_output.put_line('Inserted job id: '||p_job_id||', job title: '||p_job_title);
    COMMIT;
    
    EXCEPTION
        WHEN OTHERS THEN
            dbms_output.put_line('error in insert '||p_job_id||' '||p_job_title);
            dbms_output.put_line(SQLCODE);
            dbms_output.put_line(SQLERRM);
END;

-- test values

SELECT * FROM jobs;

BEGIN
    add_jobs(&id, &title);
END;
-----------------------------------------------------------------------
-- 9 b)
CREATE OR REPLACE PROCEDURE modify_jobs
    (p_job_id VARCHAR2, p_job_title VARCHAR2)
IS
    v_job_id VARCHAR2(20);
BEGIN
    SELECT job_id INTO v_job_id FROM jobs WHERE job_id=p_job_id;

    UPDATE jobs SET job_title=p_job_title WHERE job_id=p_job_id;
    dbms_output.put_line('Updated job title: '||p_job_title||' for job ID= '||p_job_id);
    COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('ID `'||p_job_id||'` doesn`t exist');
            dbms_output.put_line(SQLCODE);
            dbms_output.put_line(SQLERRM);
        WHEN OTHERS THEN
            dbms_output.put_line('error in update '||p_job_id);
            dbms_output.put_line(SQLCODE);
            dbms_output.put_line(SQLERRM);
END;

-- test values

SELECT * FROM jobs;
SELECT job_id FROM jobs WHERE job_id='Pit';
BEGIN
    modify_jobs(&id, &title);
END;
-----------------------------------------------------------------------
-- 9 c)
CREATE OR REPLACE PROCEDURE remove_jobs
    (p_job_id VARCHAR2)
IS
    v_job_id VARCHAR2(20);
BEGIN
    SELECT job_id INTO v_job_id FROM jobs WHERE job_id=p_job_id;

    DELETE jobs WHERE job_id=p_job_id;
    dbms_output.put_line('Job with ID: '||p_job_id||' has been deleted');
    COMMIT;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('ID `'||p_job_id||'` can`t be found');
            dbms_output.put_line(SQLCODE);
            dbms_output.put_line(SQLERRM);
        WHEN OTHERS THEN
            dbms_output.put_line('error in update '||p_job_id);
            dbms_output.put_line(SQLCODE);
            dbms_output.put_line(SQLERRM);
END;

-- test values

SELECT * FROM jobs;
SELECT job_id FROM jobs WHERE job_id='Pit';
BEGIN
    remove_jobs(&id);
END;
-----------------------------------------------------------------------
-- 9 d)
CREATE OR REPLACE PROCEDURE get_salary_name
    (p_employee_id NUMBER, p_name OUT VARCHAR2, p_salary OUT NUMBER)
IS
BEGIN
    SELECT first_name, salary INTO p_name, p_salary FROM employees WHERE employee_id=p_employee_id;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            dbms_output.put_line('ID `'||p_employee_id||'` can`t be found');
            dbms_output.put_line(SQLCODE);
            dbms_output.put_line(SQLERRM);
        WHEN OTHERS THEN
            dbms_output.put_line('error in update '||p_employee_id);
            dbms_output.put_line(SQLCODE);
            dbms_output.put_line(SQLERRM);
END;

-- test values

SELECT * FROM employees;
SELECT first_name, salary FROM employees WHERE employee_id=100;
DECLARE
    v_name VARCHAR2(100);
    v_salary NUMBER;
BEGIN
    get_salary_name(&id, v_name, v_salary);
    dbms_output.put_line('employee name: '||v_name||', salary: '||v_salary);
END;
-----------------------------------------------------------------------

********************************** 9 **********************************